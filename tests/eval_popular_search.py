# This script takes text file from stdout of get_popular_search.py and eval with selected backend.
from app import app
from app.views.search import filter, search, search_reviews
from app.models import Course, Review
import argparse
import re
from tqdm import tqdm


REG = re.compile(r"(.+): (\d+) \((\d+) / (\d+)\)")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Eval popular search queries with a backend")
    parser.add_argument("file", type=str, help="search query file generated by get_popular_search.py")
    parser.add_argument("--backend", type=str, default=None, help="search backend (use config as default)")

    args = parser.parse_args()
    if args.backend:
        app.config["SEARCH_BACKEND"] = args.backend
    print(f"Using backend: {app.config['SEARCH_BACKEND']}")

    with open(args.file, "r") as f:
        with app.app_context():
            for l in tqdm(f):
                m = REG.match(l)
                assert m
                query = m.group(1)
                total = int(m.group(2))
                course_cnt = int(m.group(3))
                review_cnt = int(m.group(4))

                if total > 10:
                    keywords = filter(query).split()
                    res = search(keywords, 1, 10)
                    search_first = None if not res.items else res.items[0]
                    # print(query, res.total, course_cnt / total, search_first)
                    if course_cnt and not search_first:
                        print(f"Course search failed: {query} (cnt={total})")
